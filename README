1. Реализовать отношение «многие-ко-многим» между множеством студентов и множеством учебных курсов (учебных предметов). Отношение «многие-ко-многим» называется так потому, что на каждый курс могут записаться много студентов (не один) и каждый студент может записаться на несколько курсов. Время от времени может возникнуть необходимость вставить или удалить студентов с какого-либо курса, определить, какие студенты посещают тот или иной курс, или узнать, какие курсы посещает конкретный студент.
2. Реализовать класс для хранения списка студентов в массиве (использовать закрытое хеширование). Заполнение массива отдельный статический метод в том же классе, что и метод main().
3. Реализовать класс для хранения списка курсов в массиве (использовать закрытое хеширование). Заполнение массива отдельный статический метод в том же классе, что и метод main().
4. Реализовать класс мультисписков, в котором реализовать следующие операции (s – студент, с – курс):
addStudentToCourse(s, c) – добавить студента s на курс c.
removeStudentFromCourse(s, c) – удалить студента s c курса c.
removeStudent(s) – удалить студента s со всех курсов.
removeCourse(c) – удалить всех студентов с курса c.
printStudentsOfCourse(c) – вывести список всех студентов посещающих курс c.
printCoursesOfStudent(s) – вывести список курсов, посещаемых студентом s.
5. Реализовать класс с методом main(). В этом методе создать объект мультисписок и протестировать все вышеперечисленные операции.

Лабораторная работа состоит из двух этапов: проектирование и реализация. Пока не принят этап проектирования, реализация не рассматривается!
Проект представляется в виде текстового файла, в котором описываются все классы и их данные. Кроме того, на естественном языке перечисляются все действия для всех конструкторов, операций и вспомогательных методов.

Общие требования:
Не использовать коллекции.
Не использовать доступ по умолчанию. Указывать доступ для всего, классов, данных, методов.
Для всех классов перед каждым методом (кроме main()), в комментариях должно быть записано: какую задачу решает метод, какие параметры ему передаются, что возвращается в результате.
Для всех объявленных в методах переменных, включая метод main(), в комментариях необходимо указать их назначение.
Все важные для понимания методов моменты должны сопровождаться комментариями.
